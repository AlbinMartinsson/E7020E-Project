#![no_main]
#![no_std]

extern crate cortex_m;
extern crate panic_halt;
//extern crate stm32f4;
extern crate stm32f4xx_hal as hal;
use crate::hal::prelude::*;
use cortex_m::{asm, iprintln};
use crate::hal::spi::{Spi, Mode, Phase, Polarity, NoMiso};
//use hal::stm32::ITM;
// use crate::hal::stm32::Interrupt::EXTI0;
use rtfm::app;
// use hal::stm32::Interrupt::EXTI0;

#[app(device = hal::stm32)]
const APP: () = {
    #[init]
    fn init() {
        let stim = &mut core.ITM.stim[0];
        iprintln!(stim, "lcd");
        let rcc = device.RCC.constrain();

        // 16 MHz (default, all clocks)
        let clocks = rcc.cfgr.freeze();

        let gpioc = device.GPIOC.split();
        let sck = gpioc.pc10.into_alternate_af6();
        let mosi = gpioc.pc12.into_alternate_af6();
        //let mut mosi = gpioc.pc12.into_push_pull_output();
        let gpioa = device.GPIOA.split();
        let mut cd = gpioc.pc11.into_push_pull_output();
        let mut cs = gpioa.pa15.into_push_pull_output();
        //mosi.set_high();
        cd.set_low();
        cs.set_low();
        cs.set_high();
        let mode = Mode {
            polarity: Polarity::IdleHigh,
            phase: Phase::CaptureOnFirstTransition,
        };
        let mut spi = Spi::spi3(
            device.SPI3,
            (sck, NoMiso, mosi),
            mode,
            10_000_000.hz(),
            clocks
        );
        cs.set_low();
        let data = spi.write(&[0x40, 0xA1, 0xC0, 0xA4, 0xA6, 0xA2, 0x2F, 0x27, 0x81, 0x10, 0xFA, 0x90, 0xAF]);
        match data {
                Ok(v) => iprintln!(stim, "working with version: {:?}", v),
                Err(e) => iprintln!(stim, "error parsing header: {:?}", e),
        }
        cs.set_high();
        //0, page
        
        /*
        let arr: [u8; 207] = [240,248,248,248,248,248,248,248,248,248,248,248,240,  0,  0,  0,
    0,  0,  0,192,240,248,248,248,248,240,192,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,124,  4,  4,124,  4,  4,120,  0, 56, 84,
   84, 88,  0, 56, 84, 84, 88,  0,  4,127, 68,  0, 72, 84, 84, 36,
    0,  0,  0,  0,  0,255,255,255,255,255,255,125,125,125,125, 57,
    1,  0,  0,  0,128,224,252,255,255,255,255,159,159,255,255,255,
  255,252,224,128,  0,  0,  0,224,248,252, 30, 14,  7,135,135,135,
  135,135,  7, 14, 30, 60,120,240,224,240,120, 60, 30, 14,135,135,
  231,231,135,135,  7, 14, 30,252,248,224, 31, 63, 63, 63, 63, 63,
   63, 63, 63, 63, 63, 63, 30,  0, 30, 63, 63, 63, 63, 31, 15, 15,
   15, 15, 15, 15, 31, 63, 63, 63, 63, 30,  0,  0,  3, 31, 63,124,
  112,224,225,225,225,225,225,224,112,120, 60, 30, 15,  7, 15, 30,
   60,120,112,225,225,231,231,225,225,240,112,120, 63, 31,  7];
   */
  // Clear screen
  
        for page in 0..8 {
            //asm::bkpt();
            cs.set_low();
            cd.set_low();
            let msb_adress = 0x10 + (0>>4);
            let lsb_adress = 0x00 + (0&0x0F);
            let adress_page = 0xB0 + (page&0x0F);
            spi.write(&[msb_adress, lsb_adress, adress_page]);
            cd.set_high();
            for _ in 0..102 {
                spi.write(&[0x00]);
            } 
        }
        
   // RUST LOGO
        let arr = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0xE0, 0xF8,
0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xE0, 0xF0, 0xF8, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8, 0xF8, 0xF0, 0xF8,
0x7C, 0x3E, 0x3F, 0x3F, 0x3E, 0x7C, 0xF8, 0xF0, 0xF8, 0xF8, 0xFC, 0xFE, 0xFE, 0xFE, 0xF8, 0xF0,
0xE0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xE0, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xCC, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F,
0x7F, 0x3F, 0x3F, 0x1F, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01,
0x01, 0x01, 0x01, 0x03, 0x07, 0x07, 0x0E, 0x0C, 0x1C, 0x1C, 0x0E, 0x0E, 0x07, 0x03, 0x03, 0x01,
0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x1F, 0x1F, 0x3F,
0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xCC, 0xC0, 0xC0, 0xC0,
0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x10, 0x38, 0x38, 0xF8, 0xF8, 0xF8, 0xF9, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF,
0xFF, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE,
0xFE, 0xFC, 0xFC, 0xFC, 0xF8, 0xF0, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x01, 0x03, 0xC7, 0xEF, 0xFF,
0xFF, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xF9, 0xF8, 0xF8, 0xF8, 0x38, 0x38, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0x86, 0xCE, 0xCE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC,
0x18, 0x18, 0x18, 0x0C, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xFD, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x3F, 0x1F, 0x1F, 0x0F, 0x07, 0x03, 0x00, 0x00,
0x00, 0x06, 0x07, 0x0F, 0x0F, 0x0F, 0x1C, 0x18, 0x18, 0x38, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xCE, 0xCE, 0x86, 0x80, 0x00, 0x00, 0x01, 0x61, 0x73, 0x73, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x03, 0x03, 0x03, 0x07,
0x07, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFE, 0xFC, 0xF0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xFC, 0xFE, 0xFC, 0xFC, 0xFE,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x73, 0x73, 0x61, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x08, 0x1C, 0x1C, 0x1F, 0x1F, 0x1F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xBF, 0x3F, 0x3F, 0x3F, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0x3F,
0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x1F, 0x1F, 0x1F, 0x3F,
0x3F, 0x3F, 0x3F, 0xBF, 0xBF, 0xBF, 0xBF, 0xBF, 0x3F, 0x3F, 0x3F, 0x3F, 0xBF, 0xDF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x1F, 0x1F, 0x1F, 0x1C, 0x1C, 0x08,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x33, 0x7F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xE3,
0xE1, 0xE1, 0xE3, 0xF7, 0xFF, 0xFF, 0xFC, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC0,
0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xFE, 0xFF, 0xFF, 0xF3, 0xE3, 0xE3, 0xE3, 0xE3, 0xF3,
0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0x33, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x07, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x07,
0x0F, 0x1F, 0x7F, 0x7F, 0x7F, 0x3F, 0x1F, 0x1F, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0x7F, 0x3F,
0x1F, 0x0F, 0x1F, 0x1F, 0x3F, 0x7F, 0x7F, 0x7F, 0x1F, 0x0F, 0x07, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F,
0x1F, 0x07, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        /*
        let arr = [
        0,  0,  0,  0,  0,  0,
//     0,  0, 95,  0,  0,  0,
//     0,  7,  0,  7,  0,  0,
//    20,127, 20,127, 20,  0,
//    36, 42,127, 42, 18,  0,
   35, 19,  8,100, 98,  0, // %
//    54, 73, 86, 32, 80,  0,
//     0,  8,  7,  3,  0,  0,
//     0, 28, 34, 65,  0,  0,
//     0, 65, 34, 28,  0,  0,
//    42, 28,127, 28, 42,  0,
//     8,  8, 62,  8,  8,  0,
//     0,128,112, 48,  0,  0,
//     8,  8,  8,  8,  8,  0,
//     0,  0, 96, 96,  0,  0,
//    32, 16,  8,  4,  2,  0,
    62, 81, 73, 69, 62,  0,
     0, 66,127, 64,  0,  0, //1
   66, 97, 81, 73, 70,  0,
   33, 65, 73, 77, 51,  0,
   24, 20, 18,127, 16,  0,
   39, 69, 69, 69, 57,  0,
   60, 74, 73, 73, 48,  0,
   65, 33, 17,  9,  7,  0,
   54, 73, 73, 73, 54,  0,
    6, 73, 73, 41, 30,  0,
    0,  0, 20,  0,  0,  0, //:
//     0, 64, 52,  0,  0,  0,
//     0,  8, 20, 34, 65,  0,
//    20, 20, 20, 20, 20,  0,
//     0, 65, 34, 20,  8,  0,
//     2,  1, 81,  9,  6,  0,
//    62, 65, 93, 89, 78,  0, 
//   124, 18, 17, 18,124,  0, 
//   127, 73, 73, 73, 54,  0, 
//    62, 65, 65, 65, 34,  0, 
   127, 65, 65, 65, 62,  0, //NEW D
//   127, 73, 73, 73, 65,  0,
//   127,  9,  9,  9,  1,  0,
//    62, 65, 73, 73,122,  0,
//   127,  8,  8,  8,127,  0,
//     0, 65,127, 65,  0,  0,
//    32, 64, 65, 63,  1,  0,
//   127,  8, 20, 34, 65,  0,
//   127, 64, 64, 64, 64,  0,
//   127,  2, 28,  2,127,  0,
//   127,  4,  8, 16,127,  0,
//    62, 65, 65, 65, 62,  0,
//   127,  9,  9,  9,  6,  0,
//    62, 65, 81, 33, 94,  0, 
//   127,  9, 25, 41, 70,  0,
//    38, 73, 73, 73, 50,  0,
//     1,  1,127,  1,  1,  0,
//    63, 64, 64, 64, 63,  0,
//    31, 32, 64, 32, 31,  0,
//    63, 64, 56, 64, 63,  0,
//    99, 20,  8, 20, 99,  0,
//     3,  4,120,  4,  3,  0,
//    97, 81, 73, 69, 67,  0,
//     0,127, 65, 65, 65,  0,
//     2,  4,  8, 16, 32,  0,
//     0, 65, 65, 65,127,  0,
//     4,  2,  1,  2,  4,  0,
//    64, 64, 64, 64, 64,  0,
//     0,  3,  7,  8,  0,  0,
//    32, 84, 84, 84,120,  0, //a
//   127, 40, 68, 68, 56,  0, //b
//    56, 68, 68, 68, 40,  0, //c
//    56, 68, 68, 40,127,  0, //d
//    56, 84, 84, 84, 24,  0, //e
//     0,  8,126,  9,  2,  0, //f
//    24,164,164,164,124,  0, //g
//   127,  8,  4,  4,120,  0, //h
//     0, 68,125, 64,  0,  0, //i
//    32, 64, 64, 61,  0,  0, //j
//   127, 16, 40, 68,  0,  0, //k
//     0, 65,127, 64,  0,  0, //l
//   124,  4,120,  4,120,  0, //m
//   124,  8,  4,  4,120,  0, //n
//    56, 68, 68, 68, 56,  0, //o
//   252, 24, 36, 36, 24,  0, //p
//    24, 36, 36, 24,252,  0, //q
//   124,  8,  4,  4,  8,  0, //r
//    72, 84, 84, 84, 36,  0, //s
    4,  4, 63, 68, 36,  0, //t
   60, 64, 64, 32,124,  0, //u
//    28, 32, 64, 32, 28,  0, 
//    60, 64, 48, 64, 60,  0,
//    68, 40, 16, 40, 68,  0,
   76,144,144,144,124,  0, //y
//    68,100, 84, 76, 68,  0,
    //  0,  8, 54, 65,  0,  0,
    // 0,  0,119,  0,  0,  0,
    // 0, 65, 54,  8,  0,  0,
//     2,  1,  2,  4,  2,  0,
//    60, 38, 35, 38, 60,  0];
        ];
        */
        // let arr = [
        //     127, 65, 65, 65, 62,  0,
        //     60, 64, 64, 32,124,  0,
        //     4,  4, 63, 68, 36,  0,
        //     76,144,144,144,124,  0,
        //     0,  0, 20,  0,  0,  0,
        //     0, 0, 0, 0, 0, 0,
        //     24, 20, 18,127, 16,  0,
        //     66, 97, 81, 73, 70,  0,
        //     62, 81, 73, 69, 62,  0,
        //     35, 19,  8,100, 98,  0
        //     ];
        //getLCDText("Duty cycle: 11", offset, page)
        loop {
        let width = 102;
        let page_cnt = 64 / 8;//62 / 8;
        let mut index = 0;
        for p in 0..page_cnt{
            //asm::bkpt();
            cs.set_low();
            cd.set_low();
            let msb_adress = 0x10 + (0>>4);
            let lsb_adress = 0x00 + (0&0x0F);
            let adress_page = 0xB0 + (p&0x0F);
            spi.write(&[msb_adress, lsb_adress, adress_page]);
            cd.set_high();
            for _ in 0..width{
                spi.write(&[arr[index]]);
                index += 1;
            }
            cs.set_high();
        }

        for _ in 0..20_000{
            asm::nop();
        }
        // Clear screen
        for page in 0..8 {
            //asm::bkpt();
            cs.set_low();
            cd.set_low();
            let msb_adress = 0x10 + (0>>4);
            let lsb_adress = 0x00 + (0&0x0F);
            let adress_page = 0xB0 + (page&0x0F);
            spi.write(&[msb_adress, lsb_adress, adress_page]);
            cd.set_high();
            for _ in 0..102 {
                spi.write(&[0x00]);
            } 
        }
        for _ in 0..20_000{
            asm::nop();
        }
        }

        /*
        void dog_1701::picture(byte column, byte page, const byte *pic_adress)  
{
    byte c,p;
    unsigned int byte_cnt = 2;
    byte width, page_cnt;
        
    
    width = pgm_read_byte(&pic_adress[0]);
    page_cnt = (pgm_read_byte(&pic_adress[1]) + 7) / 8; //height in pages, add 7 and divide by 8 for getting the used pages (byte boundaries)
        
    if(width + column > 102) //stay inside display area
        width = 102 - column;
    if(page_cnt + page > 8)
        page_cnt = 8 - page;

    for(p=0; p<page_cnt; p++)
    {
        position(column, page + p);
        digitalWrite(p_a0, HIGH);
        digitalWrite(p_cs, LOW);
        
        for(c=0; c<width; c++)
            spi_out(pgm_read_byte(&pic_adress[byte_cnt++]));
        
        digitalWrite(p_cs, HIGH);
    }
}
*/










        // loop{
        //     //cs.set_low();
        //     //cd.set_high();
        //     //spi.write(&[0x00]);
        //     // let version = spi.write(&[0xAF]);//parse_version(&[1, 2, 3, 4]);
        //     // match version {
        //     //     Ok(v) => iprintln!(stim, "working with version: {:?}", v),
        //     //     Err(e) => iprintln!(stim, "error parsing header: {:?}", e),
        //     // }
        //     // cs.set_high();
        //     asm::bkpt();

        // }
    }

    #[idle]
    fn idle() -> ! {
        loop {
            asm::wfi();
        }
    }

};